name: Build SuperProtocol OS image
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      target-branch:
        required: true
        type: string
        description: sp-kata-containers branch
        default: "sp-main"
      runs-on:
        required: true
        type: choice
        description: github runner for build
        options:
        - sp-vm-runner
        - ubuntu-latest

jobs:
  build-asset:
    runs-on: ${{ inputs.runs-on }}
    env:
      S3_BUCKET: "builds-vm"
      UPLOAD_FILES: "rootfs.img OVMF.fd root_hash.txt vmlinuz"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get sp-kata-containers sources
        uses: actions/checkout@v4
        with:
          repository: Super-Protocol/sp-kata-containers
          path: sp-kata-containers
          fetch-depth: 0
          ref: ${{ inputs.target-branch }}

      - name: Get sp-vm-tools sources
        uses: actions/checkout@v4
        with:
          repository: super-protocol/sp-vm-tools
          path: sp-vm-tools
          fetch-depth: 0

      - name: Build ca-initializer
        run: |
          cd sp-vm-tools/ca-initializer/linux_builder
          ./build.sh

      - name: Store ca-initializer binary and SuperProtocol CA
        run: |
          CERT_FOLDER=sp-kata-containers/tools/osbuilder/rootfs-builder/ubuntu/superprotocol/cert/
          cp sp-vm-tools/ca-initializer/dist/ca-initializer-linux  $CERT_FOLDER
          echo "${{ vars.SP_CA_CRT }}" | tee $CERT_FOLDER/superprotocol-ca.crt > /dev/null
          ls -la $CERT_FOLDER

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        working-directory: sp-kata-containers
        run: |
          sudo apt-get update
          sudo apt-get -y install curl
          sudo bash ./sp-build.sh /sp

      - name: Set TAG variable
        run: echo "TAG=build-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Upload files to Storj
        working-directory: sp-kata-containers/build
        run: |
          rclone copy \
            --multi-thread-streams 8 \
            --s3-provider Storj \
            --s3-access-key-id=${{ secrets.S3_ACCESS_KEY }} \
            --s3-secret-access-key=${{ secrets.S3_SECRET_KEY }} \
            --s3-endpoint=gateway.storjshare.io \
            ${UPLOAD_FILES} ":s3:${S3_BUCKET}/${TAG}/"
          
      - name: Create JSON asset
        working-directory: sp-kata-containers/build
        run: |
          IFS=' ' read -r -a FILES <<< "${UPLOAD_FILES}"
          JSON="{\n"

          for file in "${FILES[@]}"; do
            if [ -f "$file" ]; then
              key=$file
              case $file in
                rootfs.img) key="rootfs" ;;
                OVMF.fd) key="bios" ;;
                root_hash.txt) key="root_hash" ;;
                vmlinuz) key="kernel" ;;
              esac

              SHA256=$(sha256sum "$file" | awk '{print $1}')
              JSON+="  \"${key}\": {\n"
              JSON+="    \"bucket\": \"${S3_BUCKET}\",\n"
              JSON+="    \"prefix\": \"${TAG}\",\n"
              JSON+="    \"filename\": \"$file\",\n"
              JSON+="    \"sha256\": \"$SHA256\"\n"
              JSON+="  },\n"
            else
              echo "File ${file} not found"
              exit 1
            fi
          done

          JSON="${JSON%,*}"
          JSON+="\n}"
          echo -e "$JSON" > vm.json

          echo "JSON successfully created"
          cat vm.json

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: true
          files: |
            sp-kata-containers/build/vm.json
