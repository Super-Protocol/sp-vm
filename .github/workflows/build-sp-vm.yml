name: Build SuperProtocol OS image
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      target-branch:
        required: true
        type: string
        description: sp-kata-containers branch
        default: "sp-main"
      runs-on:
        required: true
        type: choice
        description: github runner for build
        options:
        - sp-vm-runner
        - ubuntu-latest

jobs:
  build-asset:
    runs-on: ${{ inputs.runs-on }}
    env:
      S3_BUCKET: "builds-vm"
      UPLOAD_FILES: "rootfs.img OVMF.fd root_hash.txt vmlinuz"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get sp-kata-containers sources
        uses: actions/checkout@v4
        with:
          repository: Super-Protocol/sp-kata-containers
          path: sp-kata-containers
          fetch-depth: 0
          ref: ${{ inputs.target-branch }}

      - name: Get sp-kata-containers sources
        uses: actions/checkout@v4
        with:
          repository: Super-Protocol/sp-kata-containers
          path: sp-kata-containers
          fetch-depth: 0
          ref: ${{ inputs.target-branch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        working-directory: sp-kata-containers
        run: |
          sudo apt-get update
          sudo apt-get -y install curl s3cmd
          #sudo bash -c ./sp-build.sh
          mkdir build
          touch build/OVMF.fd
          touch build/root_hash.txt
          touch build/vmlinuz
          touch build/rootfs.img

      - name: Get the latest release tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$latest_tag" ]; then
            latest_tag="v1.0.0"
          fi
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        run: |
          version=$(echo ${{ env.latest_tag }} | sed 's/v//')
          IFS='.' read -r major minor patch <<< "$version"

          patch=$((patch + 1))
          release_version="v$major.$minor.$patch"

          echo "New version: $release_version"
          echo "release_version=$release_version" >> $GITHUB_ENV

      - name: Upload files to s3
        working-directory: sp-kata-containers/build
        run: |
          s3cmd --access_key=${{ secrets.S3_ACCESS_KEY }} \
                --secret_key=${{ secrets.S3_SECRET_KEY }} \
                --host=gateway.storjshare.io \
                --host-bucket="%(bucket)s.gateway.storjshare.io" \
                put ${UPLOAD_FILES} "s3://${S3_BUCKET}/${{ env.release_version }}/"

      - name: Create JSON asset
        working-directory: sp-kata-containers/build
        run: |
          IFS=' ' read -r -a FILES <<< "${UPLOAD_FILES}"
          JSON="{\n"

          for file in "${FILES[@]}"; do
            if [ -f "$file" ]; then
              key=$file
              case $file in
                rootfs.img) key="rootfs" ;;
                OVMF.fd) key="bios" ;;
                root_hash.txt) key="root_hash" ;;
                vmlinuz) key="kernel" ;;
              esac

              SHA256=$(sha256sum "$file" | awk '{print $1}')
              JSON+="  \"${key}: {\n"
              JSON+="    \"bucket\": \"${S3_BUCKET}\",\n"
              JSON+="    \"prefix\": \"${{ env.release_version }}\",\n"
              JSON+="    \"filename\": \"$file\",\n"
              JSON+="    \"sha256\": \"$SHA256\"\n"
              JSON+="  },\n"
            else
              echo "File ${file} not found"
              exit 1
            fi
          done

          JSON="${JSON%,\n}"
          JSON+="\n}"
          echo -e "$JSON" > vm.json

          echo "JSON successfully created"
          cat vm.json
